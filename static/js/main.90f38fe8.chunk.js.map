{"version":3,"sources":["Components/StepItem/StepItem.tsx","Redux/store/step/step.actions.ts","Pages/FormPage/FormPageMenu/FormPageMenu.tsx","Components/ButtonToggle/ButtonToggle.tsx","Pages/FormPage/FormPageContent/FormPageContent.tsx","Pages/FormPage/FormPage.tsx","Redux/store/step/step.reducer.ts","Redux/index.ts","services/fakeArray.ts","Redux/store/step/step.saga.ts","Components/Navbar/Navbar.tsx","Components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StepItem","id","name","currentStep","dispatch","className","onClick","e","ActionTypes","setCurrentStep","indexCurrentStep","type","payload","setIndexCurrentStep","connect","state","arraySteps","step","useEffect","console","log","length","map","item","key","handleDecrementClick","handleIncrementClick","children","ButtonToggle","FormPage","initialState","combineReducers","action","fakeArraySteps","Array","from","index","arrayBlocks","block","ind","setArrayStepsSaga","stepSaga","actions","slice","response","put","error","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4RA+BeA,EArB0C,SAAC,GAKnD,IAJLC,EAII,EAJJA,GACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YAEI,EADJC,SAKA,OACE,yBACEC,UAAS,oBACPJ,IAAOE,EAAYF,GAAK,qBAAuB,IAEjDK,QAAS,SAACC,MAEV,uBAAGF,UAAS,mBAAsBH,KCvB3BM,EACM,yBADNA,EAEM,yBAFNA,EAIO,0BAJPA,EAKa,gCALbA,EAOE,wCAaFC,EAAiB,SAACC,GAAD,MAA+C,CAC3EC,KAAMH,EACNI,QAASF,IAGEG,EAAsB,SACjCH,GADiC,MAEb,CACpBC,KAAMH,EACNI,QAASF,ICgBII,eALS,SAACC,GAAD,MAAiB,CACvCC,WAAYD,EAAME,KAAKD,WACvBb,YAAaY,EAAME,KAAKd,eAGXW,EAnCkD,SAAC,GAI3D,IAHLE,EAGI,EAHJA,WACAb,EAEI,EAFJA,YACAC,EACI,EADJA,SAUA,OARAc,qBAAU,WACRd,EDN+D,CACjEO,KAAMH,EACNI,QCIyB,OACtB,CAACR,IAEJc,qBAAU,WACRC,QAAQC,IAAIJ,KACX,CAACA,IAGF,yBAAKX,UAAW,mBACbW,GACCA,EAAWK,QACXL,EAAWM,KAAI,SAACC,GAAD,OACb,kBAAC,EAAD,CACEC,IAAKD,EAAKtB,GACVA,GAAIsB,EAAKtB,GACTC,KAAMqB,EAAKrB,KACXC,YAAaA,EACbC,SAAUA,W,QCAPU,eAJS,SAACC,GAAD,MAAiB,KAI1BD,EAxB0D,SAAC,GAKnE,IAJLW,EAII,EAJJA,qBACAC,EAGI,EAHJA,qBACAC,EAEI,EAFJA,SAEI,EADJvB,SAEA,OACE,yBAAKC,UAAS,8BAAyBsB,IACrC,kBAAC,IAAD,CACEhB,KAAK,UACLL,QACEmB,GAA8CC,GAG/CC,OCsCMb,eANS,SAACC,GAAD,MAAiB,CACvCC,WAAYD,EAAME,KAAKD,WACvBb,YAAaY,EAAME,KAAKd,YACxBO,iBAAkBK,EAAME,KAAKP,oBAGhBI,EAjDwD,SAAC,GAKjE,IAJLE,EAII,EAJJA,WACAN,EAGI,EAHJA,iBAEAN,GACI,EAFJD,YAEI,EADJC,UAoBA,OACE,yBAAKC,UAAW,sBACd,yBAAKA,UAAW,4BAChB,yBAAKA,UAAW,4BACQ,IAArBK,GACC,kBAACkB,EAAD,CAAcH,qBAvBO,WACvBf,GAAoB,IACtBN,EAASS,EAAoBH,EAAmB,IAChDN,EAASK,EAAeC,EAAmB,OAoBvC,QAIDA,IAAqBM,EAAWK,OAAS,GACxC,kBAACO,EAAD,CAAcF,qBArBO,WACvBV,GAAcN,GAAoBM,EAAWK,OAAS,IACxDjB,EAASS,EAAoBH,EAAmB,IAChDN,EAASK,EAAeC,EAAmB,OAkBvC,aCpCKmB,EAT2B,WACxC,OACE,yBAAKxB,UAAW,aACd,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,wBCEAyB,EAAsB,CAC1Bd,WAAY,GACZb,YAAa,CAAEF,GAAI,SACnBS,iBAAkB,GCTLqB,4BAAgB,CAC7Bd,KDWyB,WAGrB,IAFJF,EAEG,uDAFYe,EACfE,EACG,uCACH,OAAQA,EAAOrB,MACf,KAAKH,EACH,OAAO,2BACFO,GADL,IAEEC,WAAYgB,EAAOpB,UAEvB,KAAKJ,EACH,OAAO,2BACFO,GADL,IAEEZ,YAAaY,EAAMC,WAAWgB,EAAOpB,WAEzC,KAAKJ,EACH,OAAO,2BACFO,GADL,IAEEL,iBAAkBsB,EAAOpB,UAE7B,QACE,OAAOG,M,iCEtBIkB,EAfEC,MAAMC,KAAK,IAAID,MAAM,IAERZ,KAAI,SAACL,EAAMmB,GACvC,MAAO,CACLnC,GAAG,OAAD,OAASmC,EAAQ,GACnBlC,KAAK,OAAD,OAASkC,EAAQ,GACrBC,YAAaH,MAAMC,KAAK,IAAID,MAAME,EAAQ,IAAId,KAAI,SAACgB,EAAOC,GACxD,MAAO,CACLtC,GAAG,QAAD,OAAUmC,EAAQ,EAAR,SAAaG,EAAM,EAAM,IACrCrC,KAAK,QAAD,OAAUkC,EAAQ,EAAR,SAAaG,EAAM,EAAM,Y,WCJrCC,G,WASeC,GATzB,SAAUD,EAAkBE,GAA5B,uEAEqB,OAFrB,kBAE2BT,EAAeU,QAF1C,OAGI,OADMC,EAFV,gBAGUC,YRUyD,CACjElC,KAAMH,EACNI,QQZ0BgC,IAH5B,8BAKI,OALJ,mCAKUC,aRyBuBC,EQzBF,EAAD,GRyBiC,CAC7DnC,KAAMH,EACNI,QAASkC,KQhCX,kCR8BgC,IAACA,IQ9BjC,gBASe,SAAUL,IAAV,iEACb,OADa,SACPM,YAAUvC,EAA6BgC,GADhC,uCCPf,IAQe1B,eAJS,SAACC,GAAD,MAAiB,KAI1BD,EARsC,SAAC,GAAiB,EAAfV,SACtD,OAAO,yBAAKC,UAAW,UAAhB,aCOMS,eAJS,SAACC,GAAD,MAAiB,KAI1BD,EARsC,SAAC,GAAiB,EAAfV,SACtD,OAAO,yBAAKC,UAAW,UAAhB,aCMH2C,EAAiBC,cAEjBC,EAAQC,sBACZC,EACAC,8BAAoB,CAAEC,OAAO,EAAMC,WAAY,IAA/CF,CACEG,0BAAgBR,KAIpBA,EAAeS,IAAIhB,GAEnB,IAYeiB,EAZO,kBACpB,kBAAC,IAAD,CAAUR,MAAOA,GACf,yBAAK7C,UAAW,WACd,kBAAC,EAAD,MACA,0BAAMA,UAAW,QACf,kBAAC,EAAD,OAEF,kBAAC,EAAD,SCpBcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL3B,QAAQ2B,MAAMA,EAAM8B,c","file":"static/js/main.90f38fe8.chunk.js","sourcesContent":["import React, { useEffect } from \"react\"\nimport { setCurrentStep } from \"../../Redux/store/step/step.actions\"\n\ntype StepItemProps = {\n  id: string,\n  name: string,\n  currentStep: any,\n  dispatch: any,\n}\n\nconst StepItem: React.FunctionComponent<StepItemProps> = ({\n  id,\n  name,\n  currentStep,\n  dispatch,\n}) => {\n  const handleChangeStep = (e: any) => {\n    // dispatch(setCurrentStep(id))\n  }\n  return (\n    <div\n      className={`step-item ${\n        id === currentStep.id ? \"step-item_selected\" : \"\"\n      }`}\n      onClick={(e) => handleChangeStep(e)}\n    >\n      <p className={`step-item__name`}>{name}</p>\n    </div>\n  )\n}\n\nexport default StepItem\n","import { Action } from \"../../interfacesAction/action.interface\"\nimport { StepInterface } from \"../../InterfacesEntity/stepItem.interface\"\n\nexport const ActionTypes = {\n  GET_ARRAY_STEPS: \"[STEP] Get array steps\",\n  SET_ARRAY_STEPS: \"[STEP] Set array steps\",\n\n  SET_CURRENT_STEP: \"[STEP] Set current step\",\n  SET_INDEX_CURRENT_STEP: \"[STEP] Set index current step\",\n\n  GET_FAILURE: \"[getFailureAction] get failure action\",\n}\n\nexport const getArraySteps = (urlRequest: string): Action<any> => ({\n  type: ActionTypes.GET_ARRAY_STEPS,\n  payload: urlRequest,\n})\n\nexport const setArraySteps = (arraySteps: any): Action<string> => ({\n  type: ActionTypes.SET_ARRAY_STEPS,\n  payload: arraySteps,\n})\n\nexport const setCurrentStep = (indexCurrentStep: number): Action<number> => ({\n  type: ActionTypes.SET_CURRENT_STEP,\n  payload: indexCurrentStep,\n})\n\nexport const setIndexCurrentStep = (\n  indexCurrentStep: number\n): Action<number> => ({\n  type: ActionTypes.SET_INDEX_CURRENT_STEP,\n  payload: indexCurrentStep,\n})\n\nexport const getFailureAction = (error?: any): Action<any> => ({\n  type: ActionTypes.GET_FAILURE,\n  payload: error,\n})\n","import React, { useEffect } from \"react\"\nimport { connect } from \"react-redux\"\n// import fakeArraySteps from \"../../../services/fakeArray\"\nimport StepItem from \"../../../Components/StepItem/StepItem\"\nimport { getArraySteps } from \"../../../Redux/store/step/step.actions\"\nimport { StepInterface } from \"../../../Redux/InterfacesEntity/stepItem.interface\"\n\ntype FormPageMenuProps = {\n  arraySteps: any,\n  currentStep: string,\n  dispatch: any,\n}\n\nconst FormPageMenu: React.FunctionComponent<FormPageMenuProps> = ({\n  arraySteps,\n  currentStep,\n  dispatch,\n}) => {\n  useEffect(() => {\n    dispatch(getArraySteps(\"\"))\n  }, [dispatch])\n\n  useEffect(() => {\n    console.log(arraySteps)\n  }, [arraySteps])\n\n  return (\n    <div className={\"form-page__menu\"}>\n      {arraySteps &&\n        arraySteps.length &&\n        arraySteps.map((item: any) => (\n          <StepItem\n            key={item.id}\n            id={item.id}\n            name={item.name}\n            currentStep={currentStep}\n            dispatch={dispatch}\n          />\n        ))}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  arraySteps: state.step.arraySteps,\n  currentStep: state.step.currentStep,\n})\n\nexport default connect(mapStateToProps)(FormPageMenu)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\n\nimport { Button } from \"antd\"\n\ntype ButtonToggleStepProps = {\n  handleDecrementClick?: any,\n  handleIncrementClick?: any,\n  children: any,\n  dispatch: any,\n}\n\nconst ButtonToggleStep: React.FunctionComponent<ButtonToggleStepProps> = ({\n  handleDecrementClick,\n  handleIncrementClick,\n  children,\n  dispatch,\n}) => {\n  return (\n    <div className={`button-toggle-step__${children}`}>\n      <Button\n        type=\"primary\"\n        onClick={\n          handleDecrementClick ? handleDecrementClick : handleIncrementClick\n        }\n      >\n        {children}\n      </Button>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  //   stepNumber: state.step.current(),\n})\n\nexport default connect(mapStateToProps)(ButtonToggleStep)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport ButtonToggle from \"../../../Components/ButtonToggle/ButtonToggle\"\nimport {\n  setCurrentStep,\n  setIndexCurrentStep,\n} from \"../../../Redux/store/step/step.actions\"\n\ntype FormPageContentProps = {\n  arraySteps: any,\n  indexCurrentStep: number,\n  currentStep: any,\n  dispatch: any,\n}\n\nconst FormPageContent: React.FunctionComponent<FormPageContentProps> = ({\n  arraySteps,\n  indexCurrentStep,\n  currentStep,\n  dispatch,\n}) => {\n  const handleDecrementClick = () => {\n    if (indexCurrentStep >= 0) {\n      dispatch(setIndexCurrentStep(indexCurrentStep - 1))\n      dispatch(setCurrentStep(indexCurrentStep - 1))\n    }\n  }\n\n  const handleIncrementClick = () => {\n    if (arraySteps && indexCurrentStep <= arraySteps.length - 1) {\n      dispatch(setIndexCurrentStep(indexCurrentStep + 1))\n      dispatch(setCurrentStep(indexCurrentStep + 1))\n    }\n  }\n\n  // const handleChangeStep = (e: any) => {\n  //   // dispatch(setCurrentStep(id))\n  // }\n\n  return (\n    <div className={\"form-page__content\"}>\n      <div className={\"form-page__content-data\"}></div>\n      <div className={\"form-page__content-tools\"}>\n        {indexCurrentStep !== 0 && (\n          <ButtonToggle handleDecrementClick={handleDecrementClick}>\n            prev\n          </ButtonToggle>\n        )}\n        {indexCurrentStep !== arraySteps.length - 1 && (\n          <ButtonToggle handleIncrementClick={handleIncrementClick}>\n            next\n          </ButtonToggle>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  arraySteps: state.step.arraySteps,\n  currentStep: state.step.currentStep,\n  indexCurrentStep: state.step.indexCurrentStep,\n})\n\nexport default connect(mapStateToProps)(FormPageContent)\n","import React from \"react\"\nimport FormPageMenu from \"./FormPageMenu/FormPageMenu\"\nimport FormPageContent from \"./FormPageContent/FormPageContent\"\n\nconst FormPage: React.FunctionComponent = () => {\n  return (\n    <div className={\"form-page\"}>\n      <FormPageMenu />\n      <FormPageContent />\n    </div>\n  )\n}\n\nexport default FormPage\n","import { formInterface } from \"../../InterfacesEntity/form.interface\"\nimport { ActionTypes } from \"./step.actions\"\nimport { Action } from \"../../interfacesAction/action.interface\"\n\nexport interface State {\n  arraySteps: any;\n  currentStep: {};\n  indexCurrentStep: number | null;\n}\n\nconst initialState: State = {\n  arraySteps: [],\n  currentStep: { id: \"step1\" },\n  indexCurrentStep: 0,\n}\n\nexport const stepReducer = (\n  state: State = initialState,\n  action: Action<number>\n) => {\n  switch (action.type) {\n  case ActionTypes.SET_ARRAY_STEPS:\n    return {\n      ...state,\n      arraySteps: action.payload,\n    }\n  case ActionTypes.SET_CURRENT_STEP:    \n    return {\n      ...state,\n      currentStep: state.arraySteps[action.payload!],\n    }\n  case ActionTypes.SET_INDEX_CURRENT_STEP:\n    return {\n      ...state,\n      indexCurrentStep: action.payload,\n    }\n  default:\n    return state\n  }\n}\n","import { combineReducers } from \"redux\"\nimport { stepReducer } from \"./store/step/step.reducer\"\n// import { formReducer } from \"./store/step/step.reducer\"\n\nexport default combineReducers({\n  step: stepReducer,\n})\n","const newArray = Array.from(new Array(4))\n\nlet fakeArraySteps = newArray.map((step, index) => {\n  return {\n    id: `step${index + 1}`,\n    name: `step${index + 1}`,\n    arrayBlocks: Array.from(new Array(index + 1)).map((block, ind) => {\n      return {\n        id: `block${index + 1 + (ind + 1) ** 2}`,\n        name: `block${index + 1 + (ind + 1) ** 2}`,\n      }\n    }),\n  }\n})\n\nexport default fakeArraySteps\n","import { put, takeEvery } from \"redux-saga/effects\"\n\nimport { ActionTypes, setArraySteps, getFailureAction } from \"./step.actions\"\nimport fakeArraySteps from \"../../../services/fakeArray\"\n\nfunction* setArrayStepsSaga(actions: any) {\n  try {\n    const response = yield fakeArraySteps.slice()\n    yield put(setArraySteps(response))\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nexport default function* stepSaga() {\n  yield takeEvery(ActionTypes.GET_ARRAY_STEPS, setArrayStepsSaga)\n}\n","import React from \"react\"\nimport { connect } from \"react-redux\"\n\ntype NavbarProps = {\n  dispatch: any,\n}\n\nconst Navbar: React.FunctionComponent<NavbarProps> = ({ dispatch }) => {\n  return <div className={\"navbar\"}>Navbar</div>\n}\n\nconst mapStateToProps = (state: any) => ({\n  //   stepNumber: state.step.current(),\n})\n\nexport default connect(mapStateToProps)(Navbar)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\n\ntype FooterProps = {\n  dispatch: any,\n}\n\nconst Footer: React.FunctionComponent<FooterProps> = ({ dispatch }) => {\n  return <div className={\"footer\"}>Footer</div>\n}\n\nconst mapStateToProps = (state: any) => ({\n  //   stepNumber: state.step.current(),\n})\n\nexport default connect(mapStateToProps)(Footer)\n","import React from \"react\"\nimport \"./App.scss\"\n// import Header from \"./Components/Header/Header\"\nimport FormPage from \"./Pages/FormPage/FormPage\"\n// import Footer from \"./Components/Footer/Footer\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport rootReducer from \"./Redux/index\"\nimport createSagaMiddleware from \"redux-saga\"\nimport stepSaga from \"./Redux/store/step/step.saga\"\nimport Navbar from \"./Components/Navbar/Navbar\"\nimport Footer from \"./Components/Footer/Footer\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(stepSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <div className={\"wrapper\"}>\n      <Navbar />\n      <main className={\"main\"}>\n        <FormPage />\n      </main>\n      <Footer />\n    </div>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"./index.css\"\nimport \"antd/dist/antd.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}